# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/001_dataset_CIFAR_10.ipynb.

# %% auto 0
__all__ = ['show_image', 'get_grid', 'show_images']

# %% ../nbs/001_dataset_CIFAR_10.ipynb 6
def show_image(im,
               ax=None,
               figsize=None,
               title=None, 
               noframe=True,
               **kwargs):
    "Show a PIL or PyTorch image on `ax`."
    if fc.hasattrs(im, ('cpu','permute','detach')):
        im = im.detach().cpu()
        if len(im.shape)==3 and im.shape[0]<5: im=im.permute(1,2,0)
    elif not isinstance(im,np.ndarray): im=np.array(im)
    if im.shape[-1]==1: im=im[...,0]
    if ax is None: _,ax = plt.subplots(figsize=figsize)
    ax.imshow(im, **kwargs)
    if title is not None: ax.set_title(title)
    ax.set_xticks([]) 
    ax.set_yticks([]) 
    if noframe: ax.axis('off')
    return ax

# %% ../nbs/001_dataset_CIFAR_10.ipynb 7
def get_grid(
    n:int, # Number of axes
    nrows:int=None, # Number of rows, defaulting to `int(math.sqrt(n))`
    ncols:int=None, # Number of columns, defaulting to `ceil(n/rows)`
    title:str=None, # If passed, title set to the figure
    weight:str='bold', # Title font weight
    size:int=14, # Title font size
    **kwargs,
): # fig and axs
    "Return a grid of `n` axes, `rows` by `cols`"
    if nrows: ncols = ncols or int(np.floor(n/nrows))
    elif ncols: nrows = nrows or int(np.ceil(n/ncols))
    else:
        nrows = int(math.sqrt(n))
        ncols = int(np.floor(n/nrows))
        
    fig,axs = subplots(nrows, ncols, **kwargs)
    
    for i in range(n, nrows*ncols): # ignore the extra space
        axs.flat[i].set_axis_off()
        
    if title is not None: fig.suptitle(title, weight=weight, size=size) #title settings
        
    return fig,axs

# %% ../nbs/001_dataset_CIFAR_10.ipynb 8
def show_images(ims:list, # Images to show
                nrows:int|None=None, # Number of rows in grid
                ncols:int|None=None, # Number of columns in grid (auto-calculated if None)
                title:str|None=None,
                subtitles:list|None=None, # Optional list of titles for each image
                **kwargs):
    "Show all images `ims` as subplots with `rows` using `titles`"
    axs = get_grid(len(ims), nrows, ncols, title, **kwargs)[1].flat
    
    for im,t,ax in zip_longest(ims, subtitles or [], axs): 
        show_image(im, ax=ax, title=t)
